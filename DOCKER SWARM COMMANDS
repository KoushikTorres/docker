master
docker swarm init --advertise-addr eth0

-------------------------------------------------------------------------------------------------------------------
To add a worker to this swarm, run the following command:

    docker swarm join \
    --token SWMTKN-1-50qba7hmo5exuapkmrj6jki8knfvinceo68xjmh322y7c8f0pj-87mjqjho30uue43oqbhhthjui \
    10.0.120.3:2377
------------------------------------------------------------------------------------------------------------------
Back on node1, run docker node ls to verify your three-node cluster:
$ docker node ls
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS
7x9s8baa79l29zdsx95i1tfjp     node3               Ready               Active
x223z25t7y7o4np3uq45d49br     node2               Ready               Active
zdqbsoxa6x1bubg3jyjdmrnrn *   node1               Ready               Active              Leader
-------------------------------------------------------------------------------------------------------------------
Let's do a simple example using NGINX. For now, you will create a service with one running container, but you will scale up later.

Deploy a service by using NGINX:

$ docker service create --detach=true --name nginx1 --publish 80:80  --mount source=/etc/hostname,target=/usr/share/nginx/html/index.html,type=bind,ro nginx:1.12

----------------------------------------------------------------------------------------------------------
Inspect the service.  Use the command docker service ls to inspect the service you just created:

$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
pgqdxr41dpy8        nginx1              replicated          1/1                 nginx:1.12          *:80->80/tcp
--------------------------------------------------------------------------------------------------------------
Check the running container of the service.

To take a deeper look at the running tasks, use the command docker service ps. A task is another abstraction in Docker Swarm that represents the running instances of a service. In this case, there is a 1-1 mapping between a task and a container.

$ docker service ps nginx1
ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE           ERROR               PORTS
iu3ksewv7qf9        nginx1.1            nginx:1.12          node1               Running             Running 8 minutes ago
--------------------------------------------------------------------------------------------------------------------------------------------------

3. Scale your service

$ docker service update --replicas=5 --detach=true nginx1

$ docker service ps nginx1
ID             NAME       IMAGE        NODE      DESIRED STATE   CURRENT STATE            ERROR     PORTS
0bmoe1p7xy6n   nginx1.1   nginx:1.12   node1     Running         Running 15 minutes ago             
i6jeflakwsj3   nginx1.2   nginx:1.12   node3     Running         Running 3 seconds ago              
r2cwcy3iuv7a   nginx1.3   nginx:1.12   node1     Running         Running 12 seconds ago             
n4z5uj2u4dj5   nginx1.4   nginx:1.12   node2     Running         Running 4 seconds ago              
485to9kss21s   nginx1.5   nginx:1.12   node3     Running         Running 3 seconds ago 
--------------------------------------------------------------------------------------------------------------------------------------
TO CHECK LOGS

$ docker service logs nginx1

-----------------------------------------------------
4. Apply rolling updates
Now that you have your service deployed, you'll see a release of your application. You are going to update the version of NGINX to version 1.13.

Run the docker service update command:

$ docker service update --image nginx:1.13 --detach=true nginx1


